#!/usr/bin/env python3
"""
Description: Creates device specific secrets
Use: Once per device
"""
import os
import json
from argparse import ArgumentParser



def main(region_names, user_names, user_secrets, region_secrets, device_dir):
    file_name = "device_secrets.h"

    # create device directory
    try:
        os.mkdir(device_dir)
    except Exception as e:
        print("Could not create directory {device_dir}: {e}".format(device_dir=device_dir, e=e))
        return

    # create device secrets file
    try:
        device_secrets = open(os.path.join(device_dir, file_name), "w")
    except Exception as e:
        print("Unable to open secrets file: {e}".format(e=e))
        return

    # check for valid region names
    try:
        rids = [str(region_secrets[r]) for r in region_names]
    except Exception as e:
        print("Unable to create secrets file: {e} "
              "Please ensure all regions entered are in the list: {user_secrets}".format(e=e, user_secrets=user_secrets.keys()))
        return

    # check for valid user names
    try:
        uids = [str(user_secrets[u]['id']) for u in usernames]
    except Exception as e:
        print("Unable to create secrets file: {e} "
              "Please ensure all regions entered are in the list: {user_secrets}".format(e=e, user_secrets=user_secrets.keys()))
        return

    # write secrets
    device_secrets.write(f'''
#pragma once
#ifndef SECRETS_H
#define SECRETS_H
#include "constants.h"

#define TOTAL_USERS 64
#define TOTAL_REGIONS 32


struct user {{
    const char name[UNAME_SIZE]; 
    const uint8_t salt[SALT_SIZE]; 
    const uint8_t kpublic[PKEY_SIZE]; 
}}; 


static const uint8_t mipod_pubkey[EDDSA_PUBLIC_SIZE]; //public signing key for the firmware
static struct user provisioned_users[TOTAL_USERS] = {{ {", ".join(['{"' + u + '",'+'{'+'}'+','+ '{'+'}'+'}' for u in user_secrets])} }};

static uint32_t provisioned_regions[TOTAL_REGIONS] = {{ {", ".join([str(r) for r in region_secrets.values()])} }};
const char *REGION_NAMES[] = {{ {", ".join(['"' + r + '"' for r in region_secrets])} }};



#endif // SECRETS_H
''')


def get_args():
    """gets arguments from command line"""
    parser = ArgumentParser(description='main interface to provision system')
    parser.add_argument('--region-list', nargs='+', help='Regions the player is provisioned for.', required=True)
    parser.add_argument('--region-secrets-path', help='Path to region secrets file.', required=True)
    parser.add_argument('--user-list', help='List of users seperated by a space to provision the device for.',
                        nargs='+', required=True)
    parser.add_argument('--user-secrets-path', help='Path to user secrets file generated in createUsers.py',
                        required=True)
    parser.add_argument('--device-dir', help='Path to output any required information for the device.',
                        required=True)
    args = parser.parse_args()
    return args.region_list, args.region_secrets_path, args.user_list, args.user_secrets_path, args.device_dir


if __name__ == '__main__':
    region_names, region_secrets, usernames, user_secrets, device_dir = get_args()
    print("generating device specific secrets")
    user_secrets = json.load(open(os.path.abspath(user_secrets)))
    region_secrets = json.load(open(os.path.abspath(region_secrets)))
    main(region_names, usernames, user_secrets, region_secrets, device_dir)
